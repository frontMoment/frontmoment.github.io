[{"title":"git-diff","date":"2017-05-09T07:35:02.000Z","path":"2017/05/09/git-diff/","text":"git 有四种状态，三个区域状态：untracked,unmodified,modified,staged区域：工作区域，暂存区域，本地仓库[edit files actions] // 工作区域文件修改了 git diff //是查看 工作区域 与 暂存区域 的文件差别 git add . // 文件修改从 工作区域=&gt;暂存区域 git diff –cached //是查看 暂存区域 与 本地仓库 的文件差别 git commit -m ‘’ // 文件修改从 索引区=&gt;本地仓库 git diff HEAD //是查看 本地仓库 与 远程仓库 的文件差别","tags":[{"name":"git diff","slug":"git-diff","permalink":"http://imoment.vip/tags/git-diff/"}]},{"title":"mac OSX系统下使用charles 抓 mobile 的包","date":"2017-04-20T10:57:11.000Z","path":"2017/04/20/charles-mobile/","text":"mac OSX系统下使用charles 抓 mobile 的包1.首先手机和Mac必须在同一局域网下,比如都连接了A wifi, 2.手机设置网络代理,iphone下 打开设置手动代理路径打开 : 设置-&gt;Wi-Fi-&gt;A wifi ,找到HTTP代理,手动代理填写服务器和端口号,比如: 12192.168.8.1328888 3、此时理论上可以抓包了 4、对于抓取HTTPS请求,需要在手机上安装charles证书打开charles,按照以下步骤:Help-&gt;SSL Proxying-&gt;Install Charles Root Certificate on a Mobile Device or Remote Brower然后手机浏览器打开https://charlesproxy.com/getssl 地址下载ssl证书 5.在charles的设置SSL Proxy SettingsProxy-&gt;SSL Proxy Settings添加你想要抓包的https域名,端口设置为443即可 完成以上步骤就可以使用charles抓mobile的包了","tags":[{"name":"charles mobile proxy mac","slug":"charles-mobile-proxy-mac","permalink":"http://imoment.vip/tags/charles-mobile-proxy-mac/"}]},{"title":"mac OSX系统下使用charles 抓PC 浏览器的包","date":"2017-04-20T10:40:34.000Z","path":"2017/04/20/charles-pc/","text":"mac OSX系统下使用charles 抓PC 浏览器的包charles 安装配置不在本次教程之中1、勾选顶部状态栏的 Proxy-&gt;Start Recording 和 maxOS Proxy 2、打开mac代理配置界面,具体步骤如下: (1)steps:系统偏好设置-&gt;网络-&gt;Wi-Fi 高级-&gt;代理 (2)勾选网页代理(HTTP) 和 安全网页代理(HTTPS)代理服务器地址和端口号设置为(charles 默认端口8888) 12127.0.0.18888 然后点击好,应用就能抓取PC 浏览器的请求了。 *chrome默认不是使用系统代理,如果发现抓不到chrome的包,请检查一下chrome://settings/ 里面的代理设置","tags":[{"name":"charles pc browser proxy mac","slug":"charles-pc-browser-proxy-mac","permalink":"http://imoment.vip/tags/charles-pc-browser-proxy-mac/"}]},{"title":"webstorm-vue","date":"2016-11-11T10:33:49.000Z","path":"2016/11/11/webstorm-vue/","text":"Webstorm Vue es6报错解决方案Webstorm项目设置为Ecmascript6 Webstorm安装Vuejs插件 然后修改.vue文件中的script标签修改为如下格式 1&lt;script type=&quot;text/babel&quot;&gt; 如果你使用less的话,.vue文件中的style标签修改为如下格式1&lt;style rel=&quot;stylesheet/less&quot; lang=&quot;less&quot; scoped&gt; 通过如上两个修改,可以友好的使用vue开发了","tags":[{"name":"webstorm vue es6","slug":"webstorm-vue-es6","permalink":"http://imoment.vip/tags/webstorm-vue-es6/"}]},{"title":"vue-plugin","date":"2016-10-20T10:39:51.000Z","path":"2016/10/20/vue-plugin/","text":"Vue.js插件书写规范Vue插件书写规范，导出一个带有install方法的对象使用时，可以通过官方写法将自定义插件挂载到Vue上面：123import Vue from &apos;vue&apos;import YourPlugin from &apos;YourPlugin&apos;Vue.use(YourPlugin) 闭包里导出一个带有install方法的对象123456789101112131415161718(function () &#123; var YourPlugin = &#123; install:function(Vue,options)&#123; // todo your code,such as // Vue.component(&apos;CustomComponent&apos;, CustomComponent) &#125; &#125; // 这里为了支持CMD,AMD,CommonJs,以及script标签导入的方式 if (typeof exports == &quot;object&quot;) &#123; module.exports = YourPlugin &#125; else if (typeof define == &quot;function&quot; &amp;&amp; define.amd) &#123; define([], function()&#123; return YourPlugin &#125;) &#125; else if (window.Vue) &#123; Vue.use(YourPlugin) &#125;&#125;)() 至于为什么要这样写,为什么要导出install方法？相信大家肯定有疑问，这里摘录Vue源码的use方法,大家就能一目了然12345678910111213141516Vue.use = function (plugin) &#123; /* istanbul ignore if */ if (plugin.installed) &#123; return &#125; // additional parameters var args = toArray(arguments, 1) args.unshift(this) if (typeof plugin.install === &apos;function&apos;) &#123; plugin.install.apply(plugin, args) &#125; else &#123; plugin.apply(null, args) &#125; plugin.installed = true return this &#125; 当前后续最好将插件通过npm publish发布到npm包里面，这样其他小伙伴就能通过以下方式直接安装了1npm install YourPlugin","tags":[]},{"title":"cheat","date":"2016-09-25T10:48:36.000Z","path":"2016/09/25/cheat/","text":"更好用的shell查询命令工具,cheat安装cheat(需要python环境) 1pip install cheat 使用方式：1cheat ls 其他帮助命令：1man ls 为什么要使用cheat?相信每个人都用过 man 来查看某个命令的使用方法,这个确实很全面,但是说明文字很长,而且看着很累,解释不言简意赅,对于英语能力一般的人确实是个体力活cheat使用更简短的语言描述,和实例来展示该命令的使用方式比如:1cheat ls 下面是ls命令的常用方式说明1234567891011121314# Displays everything in the target directoryls path/to/the/target/directory# Displays everything including hidden filesls -a# Displays all files, along with the size (with unit suffixes) and timestampls -lh# Display files, sorted by sizels -S# Display directories onlyls -d */","tags":[]},{"title":"git-tips","date":"2016-08-16T11:00:00.000Z","path":"2016/08/16/git-tips/","text":"git一些常用的操作记录一、git checkout恢复某个已修改的文件（撤销未提交的修改）：1git checkout file-name 例如：git checkout src/abc.js 比如修改的都是js文件，不必一个个撤销，可以使用1git checkout *.js 撤销所有修改1git checkout . 二、删除 git add 文件1234567git add abc.jsgit rm --cached abc.jsgit add .git rm --cached . 三、解决本地多个ssh-key问题为github配置新的key ，取名为github12345~/.ssh$ ssh-keygen -t rsa -C &quot;xxx@gmail.com&quot; -f ~/.ssh/github~/.ssh$ lsgithub github.pub id_rsa id_rsa.pub known_hosts 其中默认的是id_rsa四、Existing folder or Git repository123456cd existing_foldergit initgit remote add origin git@xxxxxx:xxx/xxxx.gitgit add .git commitgit push -u origin master 最后推荐大家使用一个更好的提交工具gitmoji 和git cz安装方法参考这个地址git cz 和 gitmoji规范了提交文件的流程,填写更友好的commit信息,方便做code review","tags":[]},{"title":"new-blog","date":"2016-04-05T10:19:44.000Z","path":"2016/04/05/new-blog/","text":"Good news,新的Blog诞生,以后坚持写博客,分享技术,学习技术,better and better","tags":[{"name":"new blog","slug":"new-blog","permalink":"http://imoment.vip/tags/new-blog/"}]}]